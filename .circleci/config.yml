version: 2.1

orbs:
  slack: circleci/slack@4.2.0

commands:
  return-if-not-deployed-branch:
    description: >-
      Exit and succeed this build step if it should not deploy images to DockerHub / upload CLI to AWS
    steps:
      - run:
          name: Exit build step if should not be deployed
          command: |
            if ! ([[ "$CIRCLE_BRANCH" =~ ^[0-9]+\.[0-9]+$ ]] || [[ "$CIRCLE_BRANCH" == "master" ]]); then
              echo "Exiting build step for branch which should not be deployed ($CIRCLE_BRANCH)"
              circleci step halt
            fi
  install-go:
    steps:
      - run:
          name: Install Go
          command: |
            wget https://dl.google.com/go/go1.14.7.linux-amd64.tar.gz
            sudo tar -C /usr/local -xzf go1.14.7.linux-amd64.tar.gz
            rm -rf go*.tar.gz
            echo 'export PATH=$PATH:/usr/local/go/bin' >> $BASH_ENV
            echo 'export PATH=$PATH:~/go/bin' >> $BASH_ENV
  quay-login:
    description: Log Docker agent into Quay.io
    steps:
      - run:
          name: Login to Quay
          command: docker login -u=$QUAY_USERNAME -p=$QUAY_PASSWORD quay.io

jobs:
  test:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - setup_remote_docker
      - install-go
      - run: go get -u -v golang.org/x/lint/golint
      - run: sudo pip install black aiohttp
      - run:
          name: Lint
          command: make lint
      - run:
          name: Go Tests
          command: make test-go
      - run:
          name: Python Tests
          command: make test-python

  build-and-deploy:
    docker:
      - image: circleci/python:3.6
    environment:
      NUM_BUILD_PROCS: "2"
    steps:
      - checkout
      - setup_remote_docker
      - install-go
      - run: sudo apt update && sudo apt install parallel -y
      - run: sudo pip install awscli
      - run: make ci-build-images
      - run: make ci-build-cli
      - return-if-not-deployed-branch
      - quay-login
      - run:
          command: make ci-push-images
          no_output_timeout: 20m
      - run: make ci-build-and-upload-cli

  e2e-tests-aws:
    docker:
      - image: circleci/python:3.6
    environment:
      CORTEX_TEST_REALTIME_DEPLOY_TIMEOUT: 60
      CORTEX_TEST_BATCH_DEPLOY_TIMEOUT: 30
      CORTEX_TEST_BATCH_JOB_TIMEOUT: 200
      NUM_BUILD_PROCS: 2
    steps:
      - checkout
      - setup_remote_docker
      - run:
          name: Generate Cluster Config
          command: |
            cat \<< EOF > ./cluster-aws.yaml
            cluster_name: cortex
            provider: aws
            region: ${NIGHTLY_AWS_REGION}
            instance_type: t3a.small
            min_instances: 1
            max_instances: 5
            bucket: ${NIGHTLY_AWS_BUCKET}

            image_operator: quay.io/cortexlabs/operator:master
            image_manager: quay.io/cortexlabs/manager:master
            image_downloader: quay.io/cortexlabs/downloader:master
            image_request_monitor: quay.io/cortexlabs/request-monitor:master
            image_cluster_autoscaler: quay.io/cortexlabs/cluster-autoscaler:master
            image_metrics_server: quay.io/cortexlabs/metrics-server:master
            image_inferentia: quay.io/cortexlabs/inferentia:master
            image_neuron_rtd: quay.io/cortexlabs/neuron-rtd:master
            image_nvidia: quay.io/cortexlabs/nvidia:master
            image_fluent_bit: quay.io/cortexlabs/fluent-bit:master
            image_istio_proxy: quay.io/cortexlabs/istio-proxy:master
            image_istio_pilot: quay.io/cortexlabs/istio-pilot:master
            image_prometheus: quay.io/cortexlabs/prometheus:master
            image_prometheus_config_reloader: quay.io/cortexlabs/prometheus-config-reloader:master
            image_prometheus_operator: quay.io/cortexlabs/prometheus-operator:master
            image_prometheus_statsd_exporter: quay.io/cortexlabs/prometheus-statsd-exporter:master
            image_prometheus_to_cloudwatch: quay.io/cortexlabs/prometheus-to-cloudwatch:master
            EOF
      - run:
          name: Install Dependencies
          command: |
            pip install -e ./test/e2e
            pip install https://s3-us-west-2.amazonaws.com/get-cortex/master/python/cortex-master.tar.gz
      - run:
          name: Create Cluster
          command: cortex cluster up --config ./cluster-aws.yaml --configure-env aws -y
      - run:
          name: Run E2E Tests
          command: pytest -v test/e2e/tests -k aws --aws-env aws
      - run:
          name: Delete Cluster
          command: cortex cluster down --config ./cluster-aws.yaml -y
          when: always
      - slack/notify:
          event: fail
          channel: "#eng"
          template: basic_fail_1

workflows:
  version: 2.1

  build:
    jobs:
      - test
      - build-and-deploy-approval:
          type: approval
          requires:
            - test
          filters:
            branches:
              only:
                - /^[0-9]+\.[0-9]+$/
      - build-and-deploy:
          requires:
            - test
            - build-and-deploy-approval
          filters:
            branches:
              only:
                - master
                - /^[0-9]+\.[0-9]+$/
  nightly:
    triggers:
      - schedule:
          cron: "0 0 * * *"
          filters:
            branches:
              only:
                - master
    jobs:
      - e2e-tests-aws
